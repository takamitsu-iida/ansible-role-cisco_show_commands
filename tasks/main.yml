---

- name: CREATE LOG DIRECTORY IF NOT EXISTS
  delegate_to: localhost
  file:
    path: "{{ LOG_PATH | default('./log') }}"
    state: directory
    recurse: true
  run_once: true
  when: CREATE_LOG

- name: GET CURRENT TIME
  set_fact:
    # 2019-01-10@17:45:40
    date: "{{ lookup('pipe', 'date +%Y-%m-%d@%H:%M:%S') }}"

- name: SET BASE FILENAME
  set_fact:
    filename: "{{ PREFIX | default('') + inventory_hostname + '_' + role_name | basename + '_' + date }}"

-
  block:
    - name: RUN EXEC COMMANDS ON REMOTE NODE BIA SSH
      # delegate_to:
      ios_command:
        commands: "{{ CMD_LIST }}"
      register: result
      when:
        - (ansible_connection is defined) and (ansible_connection == 'network_cli')

    - name: SET OUTPUT LIST AS STDOUT, SSH
      set_fact:
        stdout: "{{ result.stdout }}"
      when: "'stdout' in result"

    #
    # telnetで接続する場合はmytelnetモジュールを使います
    # https://github.com/takamitsu-iida/ansible-mytelnet
    #

    # - name: RUN EXEC COMMANDS ON REMOTE NODE BIA TELNET
    #   # mytelnetを利用する場合、delegate_toの指定は必須です。制御ノードから接続するならlocalhostを指定。
    #   # delegate_to: localhost
    #   mytelnet:
    #     commands: "{{ CMD_LIST }}"
    #   delegate_to: pg04
    #   register: result
    #   when:
    #     - (ansible_connection is not defined) or (ansible_connection != 'network_cli')
    #
    # - name: SET OUTPUT LIST AS STDOUT, TELNET
    #   set_fact:
    #     stdout: "{{ result.stdout }}"
    #   when:
    #     - "'stdout' in result"

  rescue:
    - name: SAVE FAILED RESULT
      delegate_to: localhost
      copy:
        content: "{{ result | to_nice_json(indent=2) }}"
        dest: "{{ LOG_PATH + '/' + pre + filename + ext }}"
      vars:
        - pre: '_FAILED_'
        - ext: '.txt'
      when:
        - CREATE_LOG

    - name: FAIL IF ERROR OCCURED
      fail:
        msg: "Failed to execute command on remote device {{ inventory_hostname }}"

# - name: DISPLAY RESULT
#   debug:
#     msg: |
#       {% for item in CMD_LIST -%}
#       === {{ item }} ===
#       {{ stdout[loop.index0] }}
#       {% endfor %}
#   when:
#     - stdout

- name: SAVE RESULT
  delegate_to: localhost
  copy:
    content: |
      {% for item in CMD_LIST -%}
      === {{ item }} ===
      {{ stdout[loop.index0] }}
      {% endfor %}
    dest: "{{ LOG_PATH + '/' + filename + ext }}"
  vars:
    - ext: '.txt'
  when:
    - CREATE_LOG
    - stdout

#
# show interfacesの結果をCSVに変換して保存
#

- name: PARSE OUTPUT USING NTC-TEMPLATES, INTERFACES
  set_fact:
    parsed_list: "{{ stdout[INDEX] | parse_cli_textfsm(NTC_PATH) }}"
  vars:
    INDEX: 1
    NTC_PATH: "{{ NTC_PATH_INTERFACE }}"

# 結果をCSVでファイルに保存する
- name: SAVE AS CSV, SHOW INTERFACES
  delegate_to: localhost
  template:
    src: interfaces_csv.j2
    dest: "{{ LOG_PATH + '/' + filename + post + ext }}"
  vars:
    - post: '_interface'
    - ext: '.csv'
  when:
    - CREATE_LOG

#
# show ip routeの結果をCSVに変換して保存
#

- name: PARSE OUTPUT USING NTC-TEMPLATES, ROUTE
  set_fact:
    parsed_list: "{{ stdout[INDEX] | parse_cli_textfsm(NTC_PATH) }}"
  vars:
    INDEX: 2
    NTC_PATH: "{{ NTC_PATH_ROUTE }}"

# 結果をCSVでファイルに保存する
- name: SAVE AS CSV, SHOW IP ROUTE
  delegate_to: localhost
  template:
    src: ip_route_csv.j2
    dest: "{{ LOG_PATH + '/' + filename + post + ext }}"
  vars:
    - post: '_route'
    - ext: '.csv'
  when:
    - CREATE_LOG
